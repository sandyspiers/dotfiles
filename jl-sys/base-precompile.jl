precompile(Tuple{Type{NamedTuple{(:rule,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, JuliaSyntax.Token, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{OhMyREPL.Prompt.var"#15#42", Any, Any, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Base.TTY})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, String})
precompile(Tuple{typeof(Base.Unicode.textwidth), String})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, OhMyREPL.PassHandler, Array{JuliaSyntax.Token, 1}, String, Int64})
precompile(Tuple{typeof(Base.getproperty), REPL.LineEdit.ModeState, Symbol})
precompile(Tuple{typeof(Base.position), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.seek), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.divrem), Int64, Int64})
precompile(Tuple{REPL.LineEdit.var"#30#31"{OhMyREPL.Prompt.var"#2#29", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#2#29", Any, Any, Any})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, UInt8})
precompile(Tuple{typeof(Base.repeat), Char, Int64})
precompile(Tuple{REPL.LineEdit.var"#30#31"{OhMyREPL.Prompt.var"#22#49", String}, Any, Any})
precompile(Tuple{typeof(Base.getproperty), OhMyREPL.PassHandler, Symbol})
precompile(Tuple{OhMyREPL.Prompt.var"#22#49", Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.mode), REPL.LineEdit.MIState})
precompile(Tuple{typeof(Base.isempty), Base.Set{Tuple{Revise.PkgData, String}}})
precompile(Tuple{Type{Base.Multimedia.MIME{mime} where mime}, String})
precompile(Tuple{typeof(Base.Multimedia.display), Any})
precompile(Tuple{Type{Base.BottomRF{T} where T}, Type{Base.IOContext{IO_t} where IO_t<:IO}})
precompile(Tuple{OhMyREPL.var"#7#8"{REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{:var"text/plain"}, Base.RefValue{Any}}, Base.IOContext{Base.TTY}})
precompile(Tuple{typeof(Base.in!), REPL.REPLCompletions.PackageCompletion, Base.Set{REPL.REPLCompletions.Completion}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(REPL.REPLCompletions.completion_text), Base.Order.ForwardOrdering}, REPL.REPLCompletions.PackageCompletion, REPL.REPLCompletions.PackageCompletion})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.Lt{Base.Sort.var"#30#31"{Base.Order.By{typeof(REPL.REPLCompletions.completion_text), Base.Order.ForwardOrdering}}}, REPL.REPLCompletions.PackageCompletion, REPL.REPLCompletions.PackageCompletion})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(REPL.REPLCompletions.completion_text), Base.Order.ForwardOrdering}, REPL.REPLCompletions.ModuleCompletion, REPL.REPLCompletions.PackageCompletion})
precompile(Tuple{REPL.LineEdit.var"#30#31"{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, REPL.LineEdit.MIState, REPL.LineEditREPL, String})
precompile(Tuple{typeof(Base.in), String, Array{String, 1}})
precompile(Tuple{REPL.LineEdit.var"#30#31"{OhMyREPL.Prompt.var"#25#52", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#25#52", Any, Any, Any})
precompile(Tuple{typeof(Base.min), Float64, Float64})
precompile(Tuple{typeof(Base.copymutable), Array{String, 1}})
precompile(Tuple{REPL.LineEdit.var"#30#31"{OhMyREPL.BracketInserter.var"#1#8"{Array{Char, 1}, Char, Char}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#1#8"{Array{Char, 1}, Char, Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:exception, :backtrace), Tuple{UndefVarError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Symbol})
precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int64, Nothing, Bool, Bool, UInt64})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, Int32})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:exception, :backtrace), Tuple{UndefVarError, Array{Base.StackTraces.StackFrame, 1}}}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{UndefVarError, Array{Base.StackTraces.StackFrame, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{UndefVarError, Array{Base.StackTraces.StackFrame, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{Base.TTY}, UndefVarError, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(REPL.UndefVarError_hint), Base.IOContext{Base.TTY}, UndefVarError})
precompile(Tuple{typeof(Revise.update_stacktrace_lineno!), Array{Any, 1}})
precompile(Tuple{typeof(REPL.Terminals.cmove_down), REPL.Terminals.TTYTerminal, Int64})
precompile(Tuple{typeof(REPL.Terminals.cmove_col), REPL.Terminals.TTYTerminal, Int64})
precompile(Tuple{typeof(Base.write), Base.TTY, Char})
precompile(Tuple{typeof(Base.typesof)})
precompile(Tuple{typeof(Base.:(!=)), Char, Char})
precompile(Tuple{typeof(Base.getindex), Array{Int16, 1}, Int64})
precompile(Tuple{typeof(Base.:(<)), Int16, Int64})
precompile(Tuple{typeof(Base.:(>)), Int16, Int64})
precompile(Tuple{typeof(Base.:(>)), Int16, Int16})
precompile(Tuple{typeof(Base.getproperty), Core.MethodTable, Symbol})
precompile(Tuple{typeof(Base.getproperty), MethodError, Symbol})
precompile(Tuple{typeof(Base.get), Base.IOContext{Base.TTY}, Symbol, Bool})
precompile(Tuple{typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}})
precompile(Tuple{Base.var"#1034#1040"{Tuple{UnionAll}}, Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}})
precompile(Tuple{typeof(Revise.method_location), Method})
precompile(Tuple{Base.var"#1034#1040"{Tuple{DataType}}, Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, TypeVar})
precompile(Tuple{Base.var"#1034#1040"{Tuple{Union}}, Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}})
precompile(Tuple{REPL.LineEdit.var"#30#31"{OhMyREPL.Prompt.var"#26#53", String}, Any, Any})
precompile(Tuple{typeof(Base.:(<)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(>)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(!=)), UInt32, UInt32})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Nothing})
precompile(Tuple{Type{Pair{A, B} where B where A}, Base.Regex, String})
precompile(Tuple{OhMyREPL.Prompt.var"#26#53", Any, Any, Any})
precompile(Tuple{typeof(Base.withenv), OhMyREPL.Prompt.var"#27#54"{REPL.LineEdit.MIState}, Pair{String, Nothing}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Array{Base.SubString{String}, 1}, Char})
precompile(Tuple{typeof(fzf_jll.fzf), Function})
precompile(Tuple{fzf_jll.var"##fzf#3", Bool, Bool, typeof(fzf_jll.fzf), Function})
precompile(Tuple{typeof(Base.string), Function, String})
precompile(Tuple{typeof(Base.depwarn), Any, Any})
precompile(Tuple{typeof(Base._depwarn), Any, Any, Bool})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{String}})
precompile(Tuple{typeof(JLLWrappers.withenv_executable_wrapper), Function, String, String, String, Bool, Bool})
precompile(Tuple{typeof(JLLWrappers.adjust_ENV!), Base.Dict{K, V} where V where K, String, String, Bool, Bool})
precompile(Tuple{typeof(Base.get), Base.Dict{String, String}, String, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, String}, String})
precompile(Tuple{typeof(Base.string), String, Char, Vararg{Union{Char, String, Symbol}}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, String}, Int64})
precompile(Tuple{typeof(Base.withenv), JLLWrappers.var"#2#3"{JLFzf.var"#1#2"{String, NTuple{4, String}}, String}, Pair{String, String}, Vararg{Pair{String, String}}})
precompile(Tuple{JLLWrappers.var"#2#3"{JLFzf.var"#1#2"{String, NTuple{4, String}}, String}})
precompile(Tuple{Type{NamedTuple{(:ignorestatus,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.:(!=)), Int64, UInt32})
precompile(Tuple{typeof(Base.:(*)), Bool, UInt32})
precompile(Tuple{JLFzf.var"#1#2"{String, NTuple{4, String}}, String})
precompile(Tuple{typeof(Base.arg_gen), NTuple{4, String}})
precompile(Tuple{typeof(Base.read), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.setindex!), Base.EnvDict, String, String})
precompile(Tuple{typeof(Base.isempty), Base.SubString{String}})
precompile(Tuple{typeof(JLFzf.insert_history_to_repl), REPL.LineEdit.MIState, Base.SubString{String}})
precompile(Tuple{typeof(Base.withenv), JLLWrappers.var"#2#3"{JLFzf.var"#1#2"{String, NTuple{5, String}}, String}, Pair{String, String}, Vararg{Pair{String, String}}})
precompile(Tuple{JLLWrappers.var"#2#3"{JLFzf.var"#1#2"{String, NTuple{5, String}}, String}})
precompile(Tuple{JLFzf.var"#1#2"{String, NTuple{5, String}}, String})
precompile(Tuple{typeof(Base.arg_gen), NTuple{5, String}})
precompile(Tuple{REPL.var"#113#131"{REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Any, Vararg{Any}})
precompile(Tuple{REPL.LineEdit.var"#143#199", REPL.LineEdit.MIState, Any, Union{Char, Base.SubString{String}, String}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.issorted), Array{String, 1}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}})
precompile(Tuple{REPL.LineEdit.var"#118#174", REPL.LineEdit.MIState, Any, Vararg{Any}})
precompile(Tuple{REPL.LineEdit.var"#120#176", REPL.LineEdit.MIState, Any, Vararg{Any}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}}})
precompile(Tuple{typeof(Base.string), Base.SubString{String}})
precompile(Tuple{REPL.LineEdit.var"#30#31"{REPL.var"#97#100"{REPL.LineEdit.Prompt}, String}, Any, Any})
precompile(Tuple{REPL.var"#97#100"{REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Any, Vararg{Any}})
precompile(Tuple{REPL.var"#98#101"{REPL.LineEdit.MIState, Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, REPL.LineEdit.Prompt}})
precompile(Tuple{REPL.LineEdit.var"#30#31"{REPLExt.var"#53#55"{REPL.LineEdit.Prompt}, String}, Any, Any})
precompile(Tuple{REPLExt.var"#53#55"{REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
precompile(Tuple{REPLExt.var"#54#56"{REPL.LineEdit.MIState, Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, REPL.LineEdit.Prompt}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:hint,), Tuple{Bool}}, typeof(REPL.LineEdit.complete_line), REPLExt.PkgCompletionProvider, REPL.LineEdit.PromptState})
precompile(Tuple{typeof(Base.filter), REPLExt.var"#39#41", Array{String, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:hint,), Tuple{Bool}}, typeof(REPLExt.complete_argument), Pkg.REPLMode.CommandSpec, Array{String, 1}, String, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:shell_escape,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:hint,), Tuple{Bool}}, REPLExt.var"#34#36"{REPLExt.var"#34#35#37"{typeof(REPLExt.complete_activate)}}, Base.Dict{Symbol, Any}, String, Int64, Int64})
precompile(Tuple{REPLExt.var"#2#5", REPL.REPLCompletions.PathCompletion})
precompile(Tuple{typeof(Pkg.REPLMode.is_opt), String})
precompile(Tuple{REPLExt.var"#47#50"{REPL.LineEditREPL}, REPL.LineEdit.MIState, Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Bool})
precompile(Tuple{typeof(Pkg.REPLMode.parse_activate), Array{Pkg.REPLMode.QString, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Pkg.REPLMode.Command}, Pkg.REPLMode.CommandSpec, Base.Dict{Symbol, Any}, Array{String, 1}})
precompile(Tuple{Pkg.API.var"##activate#233", Bool, Bool, Base.IOContext{IO}, typeof(Pkg.API.activate), String})
precompile(Tuple{typeof(Base.lock), Base.TTY})
precompile(Tuple{typeof(Base.unlock), Base.TTY})
precompile(Tuple{typeof(Base.similar), Array{String, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{String, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{String, 1}, String, Int64})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{String, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{Type{GenericMemory{:not_atomic, String, Core.AddrSpace{Core}(0x00)}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Base.UUID}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Union{Array{String, 1}, String}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Array{String, 1}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Base.Dict{String, String}}, Base.IdDict{Any, Any}})
precompile(Tuple{FileWatching.Pidfile.var"##mkpidlock#7", Base.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:stale_age, :wait), Tuple{Int64, Bool}}}, typeof(FileWatching.Pidfile.mkpidlock), Base.var"#1081#1082"{Base.PkgId}, String, Int32})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:reasons,), Tuple{Base.Dict{String, Int64}}}, typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Base.CoreLogging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:context,), Tuple{Nothing}}, typeof(Base.repr), Base.Multimedia.MIME{:var"text/plain"}, Base.PkgId})
precompile(Tuple{typeof(Base.get), Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Symbol, Nothing})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Array{Pair{Symbol, Any}, 1}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Base.CoreLogging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{typeof(Base.convert), Type{String}, String})
precompile(Tuple{typeof(Base.isopen), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.CoreLogging.default_metafmt), Base.CoreLogging.LogLevel, Vararg{Any, 5}})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.arg_gen), Tuple{String, String}})
precompile(Tuple{typeof(Base.write), Base.IOStream, UInt32})
precompile(Tuple{typeof(Base.getproperty), Method, Symbol})
precompile(Tuple{REPL.LineEdit.var"#30#31"{OhMyREPL.Prompt.var"#55#57"{REPL.LineEdit.PrefixHistoryPrompt}, String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#55#57"{REPL.LineEdit.PrefixHistoryPrompt}, Any, Any, Vararg{Any}})
precompile(Tuple{typeof(REPL.LineEdit.history_prev_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, AbstractString})
precompile(Tuple{typeof(REPL.LineEdit._buffer), REPL.LineEdit.PrefixSearchState})
precompile(Tuple{typeof(Base.something), REPL.LineEdit.Prompt, REPL.LineEdit.Prompt})
precompile(Tuple{typeof(TypedNamedTuples.test_revise), Int64})
precompile(Tuple{typeof(Revise.is_same_file), String, String})
precompile(Tuple{typeof(Revise.process_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, Expr, String, Module})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{Module, Expr}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.isequal), QuoteNode, QuoteNode})
precompile(Tuple{typeof(Base.hash), QuoteNode, UInt64})
precompile(Tuple{typeof(Base.hash), Bool, UInt64})
precompile(Tuple{typeof(Base.getproperty), Core.LineInfoNode, Symbol})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, GlobalRef, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Revise.var"#18#19"{Symbol}, Any})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{Base.var"#598#599"{Tuple{}, String, String}, Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.match), Base.Regex, String})
precompile(Tuple{typeof(JuliaInterpreter.finish_and_return!), Any, JuliaInterpreter.Frame, Bool})
precompile(Tuple{typeof(JuliaInterpreter.getargs), Array{Any, 1}, JuliaInterpreter.Frame})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{LineNumberNode, Expr}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.get!), Type{Array{Tuple{LineNumberNode, Expr}, 1}}, Base.IdDict{Type, Union{Base.Missing, Array{Tuple{LineNumberNode, Expr}, 1}}}, Any})
precompile(Tuple{typeof(Revise.parse_source), String, Module})
precompile(Tuple{Distributed.var"#65#67", Distributed.LocalProcess})
precompile(Tuple{Distributed.var"#64#66", Distributed.LocalProcess})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Distributed.remotecall), Function, Distributed.LocalProcess, Module, Vararg{Any}})
precompile(Tuple{typeof(Base.hash), Distributed.Future, UInt64})
precompile(Tuple{typeof(TypedNamedTuples.test_revise), Int64})
precompile(Tuple{Type{NamedTuple{(:backtrace,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Distributed.var"#100#102"{Distributed.RemoteValue, Distributed.var"#153#154"{typeof(eval), Tuple{Module, Expr}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}})
precompile(Tuple{typeof(Distributed.run_work_thunk), Distributed.var"#153#154"{typeof(eval), Tuple{Module, Expr}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Bool})
precompile(Tuple{typeof(Base.put!), Distributed.RemoteValue, Distributed.RemoteException})
precompile(Tuple{typeof(Base.getproperty), Distributed.RemoteValue, Symbol})
precompile(Tuple{Base.var"#771#772"{Base.WeakKeyDict{Distributed.AbstractRemoteRef, Nothing}}, Distributed.Future})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Distributed.RemoteException})
precompile(Tuple{REPL.LineEdit.var"#30#31"{OhMyREPL.BracketInserter.var"#2#9"{Char}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#2#9"{Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.FileMonitor})
