precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(Pkg.API.instantiate)})
precompile(Tuple{typeof(Base.map), Function, Array{Any, 1}})
precompile(Tuple{Type{Array{Dates.DateTime, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.maximum), Array{Dates.DateTime, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Dates.DateTime})
precompile(Tuple{typeof(Base.map), Function, Array{Base.Dict{String, Dates.DateTime}, 1}})
precompile(Tuple{typeof(TOML.Internals.Printer.is_array_of_tables), Array{Base.Dict{String, Dates.DateTime}, 1}})
precompile(Tuple{typeof(Base.repeat), Char, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:indent, :sorted, :by, :inline_tables), Tuple{Int64, Bool, typeof(Base.identity), Base.IdSet{Base.Dict{String, V} where V}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{Base.var"##invokelatest#2", Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:indent, :sorted, :by, :inline_tables), Tuple{Int64, Bool, typeof(Base.identity), Base.IdSet{Base.Dict{String, V} where V}}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:indent, :sorted, :by, :inline_tables), Tuple{Int64, Bool, typeof(Base.identity), Base.IdSet{Base.Dict{String, V} where V}}}, typeof(TOML.Internals.Printer.print_table), Nothing, Base.IOStream, Base.Dict{String, Dates.DateTime}, Array{String, 1}})
precompile(Tuple{typeof(Base.similar), Array{Any, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Any, 1}})
precompile(Tuple{typeof(Base.similar), Array{String, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{String, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{String, 1}, String, Int64})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Union{Array{String, 1}, String}}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Base.UUID}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Union{Array{String, 1}, String}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Array{String, 1}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Base.Dict{String, String}}, Base.IdDict{Any, Any}})
precompile(Tuple{Type{GenericMemory{:not_atomic, String, Core.AddrSpace{Core}(0x00)}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.unsafe_read), Base.PipeEndpoint, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.readbytes!), Base.PipeEndpoint, Array{UInt8, 1}, Int64})
precompile(Tuple{Base.var"#893#896"{Base.Process}})
precompile(Tuple{typeof(Base.uv_shutdowncb_task), Ptr{Nothing}, Int32})
precompile(Tuple{typeof(Base.closewrite), Base.PipeEndpoint})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:internal_call, :strict, :warn_loaded, :timing, :_from_loading, :configs, :io), Tuple{Bool, Bool, Bool, Bool, Bool, Pair{Base.Cmd, Base.CacheFlags}, Base.PipeEndpoint}}, typeof(Base.Precompilation.precompilepkgs), Array{String, 1}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Base.Set{Base.PkgId}}, Base.PkgId})
precompile(Tuple{typeof(Base.issubset), Base.Set{Base.PkgId}, Base.Set{Base.PkgId}})
precompile(Tuple{typeof(Base.getproperty), Base.PipeEndpoint, Symbol})
precompile(Tuple{Type{LanguageServer.LanguageServerInstance}, Any, Any, String, String, Nothing, String})
precompile(Tuple{Type{JSONRPC.JSONRPCEndpoint{IOIn, IOOut} where IOOut<:IO where IOIn<:IO}, Base.PipeEndpoint, Base.PipeEndpoint, Nothing})
precompile(Tuple{Type{GenericMemory{:not_atomic, SymbolServer.MethodStore, Core.AddrSpace{Core}(0x00)}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.run), LanguageServer.LanguageServerInstance})
precompile(Tuple{typeof(Base.run), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{JSONRPC.var"#3#5"{JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}}})
precompile(Tuple{JSONRPC.var"#4#6"{JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Base.SHA1})
precompile(Tuple{typeof(JSONRPC.get_next_message), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, NamedTuple{(:type, :msg), Tuple{Symbol, Base.Dict{String, Any}}}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:type, :msg), Tuple{Symbol, Base.Dict{String, Any}}}, Symbol})
precompile(Tuple{typeof(LanguageServer.add_timer_message!), Base.RefValue{Bool}, Array{Any, 1}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, String}, Int64, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Nothing})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Int64}, Int64, Int64})
precompile(Tuple{typeof(JSONRPC.dispatch_msg), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, JSONRPC.MsgDispatcher, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.get), Base.Dict{String, JSONRPC.Handler}, String, Nothing})
precompile(Tuple{Type{LanguageServer.InitializeParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.InfoParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.InfoParams}, String, String})
precompile(Tuple{Type{LanguageServer.URIs2.URI}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Nothing, Nothing})
precompile(Tuple{Type{LanguageServer.ClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.WorkspaceClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.WorkspaceEditClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{String}, Array{Any, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{String}, Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{String}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{String}, Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{LanguageServer.WorkspaceEditClientCapabilities}, Bool, Array{String, 1}, Base.Missing})
precompile(Tuple{Type{LanguageServer.DidChangeWatchedFilesClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.DidChangeWatchedFilesClientCapabilities}, Bool})
precompile(Tuple{Type{LanguageServer.WorkspaceSymbolClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.SymbolKindCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{Int64}, Array{Any, 1}})
precompile(Tuple{typeof(Base.cconvert), Type, Base.MPFR.MPFRRoundingMode})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Base.MPFR.MPFRRoundingMode}, Base.MPFR.MPFRRoundingMode})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Int64}, Tuple{Array{Any, 1}}}})
precompile(Tuple{Type{LanguageServer.SymbolKindCapabilities}, Array{Int64, 1}})
precompile(Tuple{Type{LanguageServer.WorkspaceSymbolClientCapabilities}, Base.Missing, LanguageServer.SymbolKindCapabilities})
precompile(Tuple{Type{LanguageServer.ExecuteCommandClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.ExecuteCommandClientCapabilities}, Bool})
precompile(Tuple{Type{LanguageServer.WorkspaceClientCapabilities}, Bool, LanguageServer.WorkspaceEditClientCapabilities, Base.Missing, LanguageServer.DidChangeWatchedFilesClientCapabilities, LanguageServer.WorkspaceSymbolClientCapabilities, LanguageServer.ExecuteCommandClientCapabilities, Bool, Bool})
precompile(Tuple{Type{LanguageServer.TextDocumentClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.TextDocumentSyncClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.TextDocumentSyncClientCapabilities}, Base.Missing, Bool, Bool, Bool})
precompile(Tuple{Type{LanguageServer.CompletionClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CompletionItemClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CompletionItemClientCapabilities}, Bool, Base.Missing, Array{String, 1}, Bool, Base.Missing, Base.Missing})
precompile(Tuple{Type{LanguageServer.CompletionClientCapabilities}, Bool, LanguageServer.CompletionItemClientCapabilities, Base.Missing, Bool})
precompile(Tuple{Type{LanguageServer.HoverClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.HoverClientCapabilities}, Bool, Array{String, 1}})
precompile(Tuple{Type{LanguageServer.SignatureHelpClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.SignatureInformationCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.ParameterInformationCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.ParameterInformationCapabilities}, Bool})
precompile(Tuple{Type{LanguageServer.SignatureInformationCapabilities}, Base.Missing, LanguageServer.ParameterInformationCapabilities})
precompile(Tuple{Type{LanguageServer.SignatureHelpClientCapabilities}, Bool, LanguageServer.SignatureInformationCapabilities, Base.Missing})
precompile(Tuple{Type{LanguageServer.DeclarationClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.DeclarationClientCapabilities}, Bool, Bool})
precompile(Tuple{Type{LanguageServer.DefinitionClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.DefinitionClientCapabilities}, Bool, Bool})
precompile(Tuple{Type{LanguageServer.TypeDefinitionClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.TypeDefinitionClientCapabilities}, Bool, Bool})
precompile(Tuple{Type{LanguageServer.ImplementationClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.ImplementationClientCapabilities}, Bool, Bool})
precompile(Tuple{Type{LanguageServer.ReferenceClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.ReferenceClientCapabilities}, Bool})
precompile(Tuple{Type{LanguageServer.DocumentSymbolClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.DocumentSymbolClientCapabilities}, Base.Missing, LanguageServer.SymbolKindCapabilities, Bool})
precompile(Tuple{Type{LanguageServer.CodeActionClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CodeActionLiteralCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CodeActionKindCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CodeActionClientCapabilities}, Bool, LanguageServer.CodeActionLiteralCapabilities, Bool})
precompile(Tuple{Type{LanguageServer.DocumentLinkClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.DocumentLinkClientCapabilities}, Bool, Bool})
precompile(Tuple{Type{LanguageServer.DocumentFormattingClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.DocumentFormattingClientCapabilities}, Bool})
precompile(Tuple{Type{LanguageServer.DocumentRangeFormattingClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.DocumentRangeFormattingClientCapabilities}, Bool})
precompile(Tuple{Type{LanguageServer.DocumentOnTypeFormattingClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.DocumentOnTypeFormattingClientCapabilities}, Bool})
precompile(Tuple{Type{LanguageServer.RenameClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.RenameClientCapabilities}, Bool, Bool})
precompile(Tuple{Type{LanguageServer.PublishDiagnosticsClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.TagClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.PublishDiagnosticsClientCapabilities}, Bool, LanguageServer.TagClientCapabilities, Bool})
precompile(Tuple{Type{LanguageServer.SelectionRangeClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.SelectionRangeClientCapabilities}, Bool})
precompile(Tuple{Type{LanguageServer.WindowClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.WindowClientCapabilities}, Bool})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{LanguageServer.WorkspaceFolder}, Array{Any, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{LanguageServer.WorkspaceFolder}, Tuple{Array{Any, 1}}}})
precompile(Tuple{Type{LanguageServer.WorkspaceFolder}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.InitializeParams}, Int64, LanguageServer.InfoParams, String, LanguageServer.URIs2.URI, Nothing, LanguageServer.ClientCapabilities, Base.Missing, Array{LanguageServer.WorkspaceFolder, 1}, String})
precompile(Tuple{Type{JSONRPC.JSONRPCError}, Int64, String, Nothing})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:None, :Full, :Incremental), Tuple{Int64, Int64, Int64}}, Symbol})
precompile(Tuple{Type{LanguageServer.SaveOptions}, Bool})
precompile(Tuple{Type{LanguageServer.TextDocumentSyncOptions}, Bool, Int64, Bool, Bool, LanguageServer.SaveOptions})
precompile(Tuple{Type{LanguageServer.DocumentLinkOptions}, Bool, Base.Missing})
precompile(Tuple{typeof(Base.keys), Base.Dict{String, LanguageServer.ServerAction}})
precompile(Tuple{typeof(Base.getproperty), Base.KeySet{String, Base.Dict{String, LanguageServer.ServerAction}}, Symbol})
precompile(Tuple{Type{LanguageServer.WorkspaceFoldersOptions}, Bool, Bool})
precompile(Tuple{Type{LanguageServer.WorkspaceOptions}, LanguageServer.WorkspaceFoldersOptions})
precompile(Tuple{LanguageServer.var"#116#117"{typeof(LanguageServer.initialize_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.InitializeParams})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, LanguageServer.InitializeResult})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, LanguageServer.InitializeResult}}})
precompile(Tuple{typeof(JSON.Writer.json), Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.InitializeResult})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.InitializeResult, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.ServerCapabilities})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.ServerCapabilities, NTuple{23, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.TextDocumentSyncOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.TextDocumentSyncOptions, NTuple{5, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, Bool})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.SaveOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.SaveOptions, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.CompletionOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.CompletionOptions, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, Array{String, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.SignatureHelpOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.SignatureHelpOptions, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.DocumentLinkOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.DocumentLinkOptions, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.RenameOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.RenameOptions, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.ExecuteCommandOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.ExecuteCommandOptions, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.WorkspaceOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.WorkspaceOptions, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.WorkspaceFoldersOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.WorkspaceFoldersOptions, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(JSONRPC.write_transport_layer), Base.PipeEndpoint, String})
precompile(Tuple{typeof(Base.filter!), SymbolServer.var"#63#64"{Base.Dict{Base.UUID, Pkg.Registry.PkgEntry}}, Array{Pair{Base.UUID, Pkg.Types.PackageEntry}, 1}})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Base.CoreLogging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Base.get), Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Symbol, Nothing})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Array{Pair{Symbol, Any}, 1}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Base.CoreLogging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{typeof(Base.isopen), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.displaysize), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.CoreLogging.default_metafmt), Base.CoreLogging.LogLevel, Vararg{Any, 5}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, Array{UInt8, 1}})
precompile(Tuple{Type{UndefVarError}, Symbol, Any})
precompile(Tuple{Type{Int64}, Char})
precompile(Tuple{SymbolServer.var"#66#68"{String, Int64, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, Pair{Base.UUID, Pkg.Types.PackageEntry}, SymbolServer.SymbolServerInstance, String, SymbolServer.var"#70#72"{LanguageServer.var"#113#115"{LanguageServer.LanguageServerInstance}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{String, String}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{String, String}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Pair{String, String}})
precompile(Tuple{typeof(Base.iterate), Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.getproperty), JSONRPC.RequestType{LanguageServer.RegistrationParams, Nothing}, Symbol})
precompile(Tuple{Type{LanguageServer.ConfigurationItem}, Base.Missing, String})
precompile(Tuple{LanguageServer.var"#116#117"{typeof(LanguageServer.initialized_notification), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.InitializedParams})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Set{LanguageServer.URIs2.URI}, LanguageServer.var"#102#103"}})
precompile(Tuple{Base.Filesystem.var"#_walkdir#35"{Bool, Bool, LanguageServer.var"#290#291"}, Base.Channel{Tuple{String, Array{String, 1}, Array{String, 1}}}, String})
precompile(Tuple{typeof(Base.convert), Type{Any}, Any})
precompile(Tuple{Base.Experimental.var"#1#2"{Base.Channel{Any}, Task}})
precompile(Tuple{Downloads.Curl.var"#54#62"{Int32, FileWatching.FDWatcher, Downloads.Curl.Multi}})
precompile(Tuple{typeof(ArgTools.arg_read), Tar.var"#81#84"{Base.DevNull, Bool, Tar.var"#1#2", String}, Base.Process})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{typeof(Base.identity), typeof(Base.Filesystem.joinpath)}, Symbol})
precompile(Tuple{Type{NamedTuple{(:force, :recursive), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.something), Nothing, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.By{typeof(Base.last), Base.Order.ForwardOrdering}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.Lt{Base.Sort.var"#30#31"{Base.Order.By{typeof(Base.last), Base.Order.ForwardOrdering}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base.Filesystem.joinpath)}, Symbol})
precompile(Tuple{typeof(Base.close), FileWatching.FDWatcher})
precompile(Tuple{typeof(ArgTools.arg_write), Tar.var"#83#86"{String, Bool, Base.Process, Bool, Tar.var"#1#2"}, Base.DevNull})
precompile(Tuple{Tar.var"##read_tarball#45", Array{UInt8, 1}, Base.DevNull, typeof(Tar.read_tarball), Tar.var"#26#28"{Array{UInt8, 1}, Bool, Bool, Base.Process, String}, Tar.var"#1#2", Base.Process})
precompile(Tuple{Type{Downloads.RequestError}, String, UInt32, String, Downloads.Response})
precompile(Tuple{Type{SymbolServer.GenericStore}, SymbolServer.VarRef, SymbolServer.FakeTypeName, String, Bool})
precompile(Tuple{Type{Array{SymbolServer.MethodStore, 1}}, UndefInitializer, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SymbolServer.FakeTypeName})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SymbolServer.FakeTypeVar})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SymbolServer.FakeUnionAll})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SymbolServer.FakeTypeofVararg})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SymbolServer.FakeUnion})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Symbol, Int64})
precompile(Tuple{typeof(SymbolServer.modify_dir), String, Base.Regex, String})
precompile(Tuple{Base.var"##open#463", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), SymbolServer.var"#49#52"{SymbolServer.Package}, String, Vararg{String}})
precompile(Tuple{typeof(SymbolServer.CacheStore.write), Base.IOStream, SymbolServer.FunctionStore})
precompile(Tuple{typeof(SymbolServer.CacheStore.write), Base.IOStream, SymbolServer.FakeTypeName})
precompile(Tuple{typeof(SymbolServer.CacheStore.write), Base.IOStream, SymbolServer.FakeTypeVar})
precompile(Tuple{typeof(SymbolServer.CacheStore.write), Base.IOStream, SymbolServer.FakeTypeofBottom})
precompile(Tuple{typeof(SymbolServer.CacheStore.write), Base.IOStream, SymbolServer.DataTypeStore})
precompile(Tuple{typeof(SymbolServer.CacheStore.write), Base.IOStream, SymbolServer.GenericStore})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{typeof(Base.round), Type{Int64}, Float64})
precompile(Tuple{SymbolServer.var"#70#72"{LanguageServer.var"#113#115"{LanguageServer.LanguageServerInstance}}, String, Int64})
precompile(Tuple{typeof(SymbolServer.CacheStore.write), Base.IOStream, SymbolServer.FakeUnionAll})
precompile(Tuple{typeof(SymbolServer.CacheStore.write), Base.IOStream, Int64})
precompile(Tuple{typeof(SymbolServer.CacheStore.write), Base.IOStream, SymbolServer.FakeUnion})
precompile(Tuple{typeof(SymbolServer.CacheStore.write), Base.IOStream, SymbolServer.FakeTypeofVararg})
precompile(Tuple{typeof(SymbolServer.CacheStore.write), Base.IOStream, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Set{LanguageServer.URIs2.URI}, LanguageServer.var"#102#103"}, Int64})
precompile(Tuple{Base.Filesystem.var"#_walkdir#35"{Bool, Bool, LanguageServer.var"#104#105"}, Base.Channel{Tuple{String, Array{String, 1}, Array{String, 1}}}, String})
precompile(Tuple{typeof(Base.merge), Base.Dict{LanguageServer.URIs2.URI, LanguageServer.TextDocument}, Base.Dict{LanguageServer.URIs2.URI, LanguageServer.TextDocument}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Any}, String, String})
precompile(Tuple{typeof(Base.pairs), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, Any}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, Any}, Int64})
precompile(Tuple{Base.Filesystem.var"#_walkdir#35"{Bool, Bool, LanguageServer.var"#292#293"}, Base.Channel{Tuple{String, Array{String, 1}, Array{String, 1}}}, String})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, LanguageServer.Document})
precompile(Tuple{typeof(Base.keys), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect), Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{Symbol}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.getproperty), LanguageServer.LanguageServerInstance, Symbol})
precompile(Tuple{typeof(Base.getproperty), StaticLint.Meta, Symbol})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, Nothing})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, StaticLint.Scope})
precompile(Tuple{Type{StaticLint.Toplevel{T} where T}, LanguageServer.Document, Array{String, 1}, StaticLint.Scope, Bool, Nothing, Array{CSTParser.EXPR, 1}, Array{CSTParser.EXPR, 1}, StaticLint.ExternalEnv, LanguageServer.LanguageServerInstance})
precompile(Tuple{Type{StaticLint.Binding}, CSTParser.EXPR, SymbolServer.FunctionStore, SymbolServer.DataTypeStore, Array{Any, 1}})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, StaticLint.Binding})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, SymbolServer.ModuleStore})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, StaticLint.Binding}, String})
precompile(Tuple{typeof(StaticLint.isexportedby), String, SymbolServer.ModuleStore})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Any, Any}, SymbolServer.VarRef})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Any, SymbolServer.VarRef})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, StaticLint.Binding}, String})
precompile(Tuple{typeof(StaticLint.eventually_overloads), StaticLint.Binding, SymbolServer.FunctionStore, StaticLint.Toplevel{LanguageServer.Document}})
precompile(Tuple{Type{StaticLint.Delayed}, StaticLint.Scope, StaticLint.ExternalEnv, LanguageServer.LanguageServerInstance})
precompile(Tuple{typeof(Base.getindex), Array{CSTParser.EXPR, 1}, Int64})
precompile(Tuple{typeof(StaticLint.get_root_method), StaticLint.Binding, LanguageServer.LanguageServerInstance})
precompile(Tuple{typeof(StaticLint.setref!), CSTParser.EXPR, SymbolServer.FunctionStore})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, SymbolServer.FunctionStore})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}})
precompile(Tuple{typeof(StaticLint.resolve_getfield), CSTParser.EXPR, SymbolServer.ModuleStore, StaticLint.Delayed})
precompile(Tuple{typeof(StaticLint.setref!), CSTParser.EXPR, SymbolServer.DataTypeStore})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, SymbolServer.DataTypeStore})
precompile(Tuple{typeof(StaticLint.settype!), StaticLint.Binding, SymbolServer.DataTypeStore})
precompile(Tuple{typeof(StaticLint.iterate_over_ss_methods), SymbolServer.FunctionStore, StaticLint.Scope, StaticLint.ExternalEnv, StaticLint.var"#30#32"{Array{Any, 1}, Int64}})
precompile(Tuple{typeof(Base.iterate), Array{SymbolServer.MethodStore, 1}})
precompile(Tuple{StaticLint.var"#30#32"{Array{Any, 1}, Int64}, SymbolServer.MethodStore})
precompile(Tuple{typeof(Base.iterate), Array{SymbolServer.MethodStore, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, SymbolServer.VarRef})
precompile(Tuple{typeof(StaticLint.resolve_getfield), CSTParser.EXPR, StaticLint.Binding, StaticLint.Delayed})
precompile(Tuple{typeof(Base.in), SymbolServer.FakeUnionAll, Array{Any, 1}})
precompile(Tuple{typeof(Base.in), SymbolServer.FakeTypeofVararg, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FakeUnionAll, SymbolServer.FakeTypeofVararg})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FakeUnionAll, SymbolServer.FakeUnionAll})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FakeTypeName, SymbolServer.FakeTypeName})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FakeTypeofVararg, SymbolServer.FakeTypeofVararg})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, SymbolServer.FakeUnionAll})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, SymbolServer.FakeTypeofVararg})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, StaticLint.Binding})
precompile(Tuple{Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), Base.Set{Any}}}, StaticLint.Binding})
precompile(Tuple{Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), Base.Set{Any}}}, SymbolServer.FakeTypeofVararg})
precompile(Tuple{typeof(Base.delete!), Base.Set{Any}, SymbolServer.FakeTypeofVararg})
precompile(Tuple{Base.ComposedFunction{typeof(Base.:(!)), Base.Fix2{typeof(Base.in), Base.Set{Any}}}, SymbolServer.FakeUnionAll})
precompile(Tuple{typeof(Base.delete!), Base.Set{Any}, SymbolServer.FakeUnionAll})
precompile(Tuple{Base.var"#160#161"{Base.var"#158#159"{typeof(Base.in), typeof(Base.pop!), Base.Set{Any}}}, SymbolServer.FakeUnionAll})
precompile(Tuple{Base.var"#160#161"{Base.var"#158#159"{typeof(Base.in), typeof(Base.pop!), Base.Set{Any}}}, SymbolServer.FakeTypeofVararg})
precompile(Tuple{Base.var"#160#161"{Base.var"#158#159"{typeof(Base.in), typeof(Base.pop!), Base.Set{Any}}}, StaticLint.Binding})
precompile(Tuple{typeof(StaticLint.iterate_over_ss_methods), SymbolServer.FunctionStore, StaticLint.Scope, StaticLint.ExternalEnv, StaticLint.var"#31#33"{Array{Any, 1}, Int64}})
precompile(Tuple{typeof(StaticLint.is_never_datatype), StaticLint.Binding, StaticLint.ExternalEnv})
precompile(Tuple{StaticLint.var"#11#12"{Tuple{Int64, Int64, Array{Symbol, 1}}}, SymbolServer.MethodStore})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{Int64}, Array{Int64, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.cat_size_shape), Tuple{Bool}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.cat_similar), Array{Int64, 1}, Type{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{Int64, 1}, Tuple{Int64}, Tuple{Bool}, Array{Int64, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{Int64, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(StaticLint.collect_hints), CSTParser.EXPR, StaticLint.ExternalEnv, Symbol})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Tuple{Int64, CSTParser.EXPR}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.getproperty), CSTParser.EXPR, Symbol})
precompile(Tuple{typeof(Base.getproperty), JSONRPC.NotificationType{LanguageServer.PublishDiagnosticsParams}, Symbol})
precompile(Tuple{typeof(LanguageServer.publish_diagnostics), LanguageServer.Document, LanguageServer.LanguageServerInstance, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.PublishDiagnosticsParams})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.PublishDiagnosticsParams, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.URIs2.URI})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, Array{LanguageServer.Diagnostic, 1}})
precompile(Tuple{Type{NamedTuple{(:by, :rev), T} where T<:Tuple}, Tuple{typeof(Base.length), Bool}})
precompile(Tuple{typeof(Base.getproperty), JSONRPC.NotificationType{LanguageServer.PublishTestsParams}, Symbol})
precompile(Tuple{typeof(LanguageServer.find_tests!), LanguageServer.Document, LanguageServer.LanguageServerInstance, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{typeof(CSTParser._unescape_string), String})
precompile(Tuple{typeof(Base.push!), Array{Symbol, 1}, Symbol})
precompile(Tuple{typeof(Base.keys), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{String, Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.in), Symbol, Base.KeySet{Symbol, Base.Dict{Symbol, SymbolServer.ModuleStore}}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{String, Base.Dict{String, Any}}, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, SymbolServer.ModuleStore}, Symbol})
precompile(Tuple{typeof(StaticLint.resolve_import_block), CSTParser.EXPR, StaticLint.Toplevel{LanguageServer.Document}, Nothing, Bool})
precompile(Tuple{typeof(StaticLint._get_field), Nothing, CSTParser.EXPR, StaticLint.Toplevel{LanguageServer.Document}})
precompile(Tuple{typeof(Base.:(==)), StaticLint.Binding, Nothing})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FunctionStore, Nothing})
precompile(Tuple{typeof(StaticLint.resolve_getfield), CSTParser.EXPR, StaticLint.Binding, StaticLint.Toplevel{LanguageServer.Document}})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FunctionStore, SymbolServer.FunctionStore})
precompile(Tuple{typeof(Base.:(==)), StaticLint.Binding, SymbolServer.FunctionStore})
precompile(Tuple{typeof(StaticLint.setref!), CSTParser.EXPR, SymbolServer.GenericStore})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, SymbolServer.GenericStore})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.GenericStore, SymbolServer.FunctionStore})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.DataTypeStore, SymbolServer.DataTypeStore})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FakeTypeName, SymbolServer.VarRef})
precompile(Tuple{typeof(Base.:(==)), StaticLint.Binding, SymbolServer.DataTypeStore})
precompile(Tuple{typeof(StaticLint.settype!), StaticLint.Binding, Nothing})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.GenericStore, Nothing})
precompile(Tuple{typeof(Base.getproperty), SymbolServer.FakeTypeName, Symbol})
precompile(Tuple{typeof(Base.getproperty), StaticLint.Binding, Symbol})
precompile(Tuple{Base.var"#816#817"{Downloads.Curl.var"#31#35"{Downloads.Curl.Multi}, Base.Timer}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.ConfigurationParams})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.ConfigurationParams, Tuple{Symbol}})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.ConfigurationItem, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Base.Channel{Any}}, String})
precompile(Tuple{typeof(JSONRPC.typed_res), Array{Any, 1}, Type{Array{Any, 1}}})
precompile(Tuple{Type{StaticLint.LintOptions}, Bool, Bool, Bool, Bool, Nothing, Vararg{Bool, 5}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, LanguageServer.var"#225#226"{LanguageServer.LanguageServerInstance, StaticLint.LintOptions}, NTuple{10, Symbol}})
precompile(Tuple{typeof(Base.any), Base.Generator{NTuple{10, Symbol}, LanguageServer.var"#225#226"{LanguageServer.LanguageServerInstance, StaticLint.LintOptions}}})
precompile(Tuple{typeof(Base.:(!=)), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.setproperty!), LanguageServer.LanguageServerInstance, Symbol, StaticLint.LintOptions})
precompile(Tuple{typeof(Base.setproperty!), LanguageServer.LanguageServerInstance, Symbol, Array{String, 1}})
precompile(Tuple{typeof(JSONRPC.send), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, JSONRPC.RequestType{LanguageServer.WorkDoneProgressCreateParams, Nothing}, LanguageServer.WorkDoneProgressCreateParams})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.WorkDoneProgressCreateParams})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.WorkDoneProgressCreateParams, Tuple{Symbol}})
precompile(Tuple{typeof(JSONRPC.send), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, JSONRPC.NotificationType{LanguageServer.ProgressParams{T} where T}, LanguageServer.ProgressParams{LanguageServer.WorkDoneProgressBegin}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.ProgressParams{LanguageServer.WorkDoneProgressBegin}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.WorkDoneProgressBegin})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.WorkDoneProgressBegin, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{LanguageServer.DidOpenTextDocumentParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.TextDocumentItem}, Base.Dict{String, Any}})
precompile(Tuple{LanguageServer.var"#116#117"{typeof(LanguageServer.textDocument_didOpen_notification), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.DidOpenTextDocumentParams})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.DataTypeStore, SymbolServer.FunctionStore})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.ModuleStore, SymbolServer.FunctionStore})
precompile(Tuple{typeof(Base.getproperty), SymbolServer.ModuleStore, Symbol})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.ModuleStore, Nothing})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.DataTypeStore, Nothing})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.Diagnostic, NTuple{4, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.Range})
precompile(Tuple{Type{LanguageServer.CodeActionParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.TextDocumentIdentifier}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.Range}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.Position}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CodeActionContext}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{LanguageServer.Diagnostic}, Array{Any, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{LanguageServer.Diagnostic}, Tuple{Array{Any, 1}}}})
precompile(Tuple{Type{LanguageServer.CodeActionContext}, Array{LanguageServer.Diagnostic, 1}, Base.Missing})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, LanguageServer.CodeAction, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:Empty, :QuickFix, :Refactor, :RefactorExtract, :RefactorInline, :RefactorRewrite, :Source, :SourceOrganizeImports), NTuple{8, String}}, Symbol})
precompile(Tuple{LanguageServer.var"#116#117"{typeof(LanguageServer.textDocument_codeAction_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.CodeActionParams})
precompile(Tuple{Type{NamedTuple{(:with_docstring,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{LanguageServer.var"#286#287", CSTParser.EXPR, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:with_docstring,), Tuple{Bool}}, typeof(LanguageServer.is_in_function_signature), CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{typeof(LanguageServer.is_in_docstring_for_function), CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#272#274", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{typeof(LanguageServer.is_in_function_signature), CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#258#259", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#260#262", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#268#270", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#256#257", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#282#283", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#254#255", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#264#266", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#278#280", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#276#277", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{Type{NamedTuple{(:inraw,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{LanguageServer.var"#284#285", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Array{LanguageServer.CodeAction, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Array{LanguageServer.CodeAction, 1}}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, Array{LanguageServer.CodeAction, 1}})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.CodeAction, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.Command})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.Command, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, LanguageServer.URIs2.URI})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Int64})
precompile(Tuple{Type{LanguageServer.DocumentLinkParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.DocumentLinkParams}, LanguageServer.TextDocumentIdentifier, Base.Missing, Base.Missing})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, LanguageServer.DocumentLink, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{LanguageServer.var"#116#117"{typeof(LanguageServer.textDocument_documentLink_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.DocumentLinkParams})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Array{LanguageServer.DocumentLink, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Array{LanguageServer.DocumentLink, 1}}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, Array{LanguageServer.DocumentLink, 1}})
precompile(Tuple{Type{LanguageServer.DocumentHighlightParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.DocumentHighlightParams}, LanguageServer.TextDocumentIdentifier, LanguageServer.Position, Base.Missing, Base.Missing})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, LanguageServer.DocumentHighlight, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:Text, :Read, :Write), Tuple{Int64, Int64, Int64}}, Symbol})
precompile(Tuple{LanguageServer.var"#116#117"{typeof(LanguageServer.textDocument_documentHighlight_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.DocumentHighlightParams})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Nothing})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Nothing}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Nothing}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, Nothing})
precompile(Tuple{Type{LanguageServer.CancelParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CancelParams}, Int64})
precompile(Tuple{LanguageServer.var"#116#117"{typeof(LanguageServer.cancel_notification), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.CancelParams})
precompile(Tuple{typeof(JSONRPC.send), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, JSONRPC.NotificationType{LanguageServer.ProgressParams{T} where T}, LanguageServer.ProgressParams{LanguageServer.WorkDoneProgressReport}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.ProgressParams{LanguageServer.WorkDoneProgressReport}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.WorkDoneProgressReport})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.WorkDoneProgressReport, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{NamedTuple{(:backlog,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Sockets.uv_connectioncb), Ptr{Nothing}, Int32})
precompile(Tuple{SymbolServer.var"#71#73"{Nothing, Base.Channel{Any}, String, SymbolServer.var"#70#72"{LanguageServer.var"#113#115"{LanguageServer.LanguageServerInstance}}}})
precompile(Tuple{typeof(Base.read), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.setproperty!), SymbolServer.SymbolServerInstance, Symbol, Base.Process})
precompile(Tuple{typeof(Base.lock), Base.GenericCondition{Base.Threads.SpinLock}})
precompile(Tuple{typeof(Base.notify), Base.GenericCondition{Base.Threads.SpinLock}})
precompile(Tuple{typeof(Base.unlock), Base.GenericCondition{Base.Threads.SpinLock}})
precompile(Tuple{Type{LanguageServer.DidChangeTextDocumentParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.VersionedTextDocumentIdentifier}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.VersionedTextDocumentIdentifier}, LanguageServer.URIs2.URI, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{LanguageServer.TextDocumentContentChangeEvent}, Array{Any, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{LanguageServer.TextDocumentContentChangeEvent}, Tuple{Array{Any, 1}}}})
precompile(Tuple{Type{LanguageServer.TextDocumentContentChangeEvent}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.TextDocumentContentChangeEvent}, Base.Missing, Base.Missing, String})
precompile(Tuple{Type{NamedTuple{(:inds,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.uvfinalize), Sockets.PipeServer})
precompile(Tuple{LanguageServer.var"#116#117"{typeof(LanguageServer.textDocument_didChange_notification), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.DidChangeTextDocumentParams})
precompile(Tuple{typeof(Base.any), Function, Array{CSTParser.EXPR, 1}})
precompile(Tuple{typeof(Base._any), typeof(CSTParser.has_error), Array{CSTParser.EXPR, 1}, Base.Colon})
precompile(Tuple{typeof(Base.setdiff), Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.deleteat!), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{CSTParser.EXPR, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.typed_vcat), Type{CSTParser.EXPR}, Array{CSTParser.EXPR, 1}, Array{CSTParser.EXPR, 1}, Array{CSTParser.EXPR, 1}})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.UnitRange{Int64}})
precompile(Tuple{typeof(StaticLint.semantic_pass), LanguageServer.Document, Array{CSTParser.EXPR, 1}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, CSTParser.EXPR, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{StaticLint.Toplevel{T} where T}, LanguageServer.Document, Array{String, 1}, StaticLint.Scope, Bool, Array{CSTParser.EXPR, 1}, Array{CSTParser.EXPR, 1}, Array{CSTParser.EXPR, 1}, StaticLint.ExternalEnv, LanguageServer.LanguageServerInstance})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, StaticLint.LintCodes})
precompile(Tuple{typeof(Base.get), Base.Dict{StaticLint.LintCodes, String}, StaticLint.LintCodes, String})
precompile(Tuple{typeof(Base.string), StaticLint.LintCodes})
precompile(Tuple{Type{LanguageServer.Diagnostic}, LanguageServer.Range, Int64, String, Base.Missing, String, String, Array{Int64, 1}, Base.Missing})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.Diagnostic, NTuple{6, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(SymbolServer.recursive_copy), SymbolServer.FunctionStore})
precompile(Tuple{typeof(SymbolServer.recursive_copy), SymbolServer.FakeUnion})
precompile(Tuple{typeof(SymbolServer.recursive_copy), SymbolServer.FakeTypeName})
precompile(Tuple{typeof(SymbolServer.recursive_copy), SymbolServer.FakeUnionAll})
precompile(Tuple{typeof(SymbolServer.recursive_copy), SymbolServer.DataTypeStore})
precompile(Tuple{typeof(SymbolServer.recursive_copy), SymbolServer.FakeTypeofVararg})
precompile(Tuple{typeof(SymbolServer.recursive_copy), SymbolServer.GenericStore})
precompile(Tuple{typeof(SymbolServer.recursive_copy), Int64})
precompile(Tuple{typeof(SymbolServer.recursive_copy), Bool})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Tuple{UInt64}, Char})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, Base.var"#252#253"{SymbolServer.CacheStore.var"#1#3"{Base.IOStream}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, Base.var"#252#253"{SymbolServer.CacheStore.var"#1#3"{Base.IOStream}}}, Int64})
precompile(Tuple{typeof(Base.string), Module})
precompile(Tuple{typeof(Base.Filesystem.contractuser), String})
precompile(Tuple{typeof(JSONRPC.send), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, JSONRPC.NotificationType{LanguageServer.ProgressParams{T} where T}, LanguageServer.ProgressParams{LanguageServer.WorkDoneProgressEnd}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.ProgressParams{LanguageServer.WorkDoneProgressEnd}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.WorkDoneProgressEnd})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.WorkDoneProgressEnd, Tuple{Symbol}})
precompile(Tuple{typeof(Base.push!), Base.Channel{Any}, Base.Dict{Symbol, SymbolServer.ModuleStore}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, NamedTuple{(:type, :msg), Tuple{Symbol, Base.Dict{Symbol, SymbolServer.ModuleStore}}}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:type, :msg), Tuple{Symbol, Base.Dict{Symbol, SymbolServer.ModuleStore}}}, Symbol})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.ExternalEnv, Symbol, Base.Dict{Symbol, SymbolServer.ModuleStore}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Float64}, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:sigdigits,), Tuple{Int64}}, typeof(Base.round), Float64})
precompile(Tuple{typeof(Base.lpad), String, Int64})
precompile(Tuple{typeof(Base.println), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, String, Vararg{Any}})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint, String})
precompile(Tuple{Downloads.Curl.var"#31#35"{Downloads.Curl.Multi}, Base.Timer})
precompile(Tuple{Downloads.Curl.var"#32#36"{Base.Timer, Downloads.Curl.Multi}})
precompile(Tuple{Type{LanguageServer.TextDocumentPositionParams}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, NamedTuple{(:pos, :active, :index), Tuple{Int64, Bool, Int64}}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Base.BottomRF{typeof(Base.:(+))}, Base._InitialValue, Int64})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:PlainText, :Markdown), Tuple{String, String}}, Symbol})
precompile(Tuple{LanguageServer.var"#116#117"{typeof(LanguageServer.textDocument_hover_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.TextDocumentPositionParams})
precompile(Tuple{Type{NamedTuple{(:show_definition,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.coalesce), Base.Missing, String})
precompile(Tuple{Type{LanguageServer.LSHoverError}, String})
precompile(Tuple{typeof(LanguageServer.get_hover), CSTParser.EXPR, String, LanguageServer.LanguageServerInstance, CSTParser.EXPR, StaticLint.ExternalEnv})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, String, SymbolServer.FakeTypeName})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, SymbolServer.VarRef, String, Vararg{Any}})
precompile(Tuple{typeof(Base.string), Int64, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, String, SymbolServer.FakeUnionAll})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, SymbolServer.FakeTypeName, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, SymbolServer.FakeTypeVar})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, SymbolServer.FakeTypeofVararg})
precompile(Tuple{typeof(LanguageServer.get_closer_hover), CSTParser.EXPR, String})
precompile(Tuple{typeof(LanguageServer.get_fcall_position), CSTParser.EXPR, String})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, LanguageServer.Hover})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, LanguageServer.Hover}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.Hover})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.Hover, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.MarkupContent})
precompile(Tuple{typeof(StaticLint._mark_import_arg), CSTParser.EXPR, SymbolServer.ModuleStore, StaticLint.Toplevel{LanguageServer.Document}, Bool})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.CodeAction, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.DocumentLink, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{LanguageServer.TextDocumentContentChangeEvent}, LanguageServer.Range, Int64, String})
precompile(Tuple{typeof(StaticLint._mark_import_arg), CSTParser.EXPR, StaticLint.Binding, StaticLint.Toplevel{LanguageServer.Document}, Bool})
precompile(Tuple{LanguageServer.var"#302#303"{Array{LanguageServer.DocumentHighlight, 1}, LanguageServer.Document}, CSTParser.EXPR, LanguageServer.Document, Int64})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Array{LanguageServer.DocumentHighlight, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Array{LanguageServer.DocumentHighlight, 1}}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, Array{LanguageServer.DocumentHighlight, 1}})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.DocumentHighlight, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(LanguageServer.get_hover), SymbolServer.ModuleStore, String, LanguageServer.LanguageServerInstance, CSTParser.EXPR, StaticLint.ExternalEnv})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, SymbolServer.ModuleStore})
precompile(Tuple{Type{LanguageServer.CompletionParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CompletionContext}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CompletionContext}, Int64, Base.Missing})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:Text, :Method, :Function, :Constructor, :Field, :Variable, :Class, :Interface, :Module, :Property, :Unit, :Value, :Enum, :Keyword, :Snippet, :Color, :File, :Reference, :Folder, :EnumMember, :Constant, :Struct, :Event, :Operator, :TypeParameter), NTuple{25, Int64}}, Symbol})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:join,), Tuple{Bool}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:PlainText, :Snippet), Tuple{Int64, Int64}}, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Nothing, SymbolServer.DataTypeStore})
precompile(Tuple{typeof(Base.:(==)), Nothing, Type})
precompile(Tuple{Type{NamedTuple{(:head, :tail), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Type{LanguageServer.Range}, Vararg{Int64, 4}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, LanguageServer.CompletionItem, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{LanguageServer.var"#116#117"{typeof(LanguageServer.textDocument_completion_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.CompletionParams})
precompile(Tuple{Type{LanguageServer.CompletionState}, Int64, Base.Dict{String, LanguageServer.CompletionItem}, LanguageServer.Range, CSTParser.EXPR, LanguageServer.Document, LanguageServer.LanguageServerInstance, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.Filesystem.splitdir), String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64, Int64})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, LanguageServer.CompletionList})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, LanguageServer.CompletionList}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.CompletionList})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.CompletionList, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, Array{LanguageServer.CompletionItem, 1}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, LanguageServer.SignatureInformation, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.Generator{Nothing, LanguageServer.var"#296#297"}, typeof(Base.identity)}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Nothing, LanguageServer.var"#296#297"}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Base.ComposedFunction{typeof(Base.identity), Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, LanguageServer.var"#296#297"}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Base.ComposedFunction{typeof(Base.identity), Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, LanguageServer.var"#296#297"}}}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.MappingRF{LanguageServer.var"#296#297", Base.BottomRF{typeof(Base.add_sum)}}, Nothing}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.MappingRF{LanguageServer.var"#296#297", Base.BottomRF{typeof(Base.add_sum)}}, Nothing}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{LanguageServer.var"#296#297", Base.BottomRF{typeof(Base.add_sum)}}, Symbol})
precompile(Tuple{LanguageServer.var"#116#117"{typeof(LanguageServer.textDocument_signatureHelp_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.TextDocumentPositionParams})
precompile(Tuple{typeof(LanguageServer.collect_signatures), CSTParser.EXPR, LanguageServer.Document, LanguageServer.LanguageServerInstance})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, LanguageServer.SignatureHelp})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, LanguageServer.SignatureHelp}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.SignatureHelp})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.SignatureHelp, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, Array{LanguageServer.SignatureInformation, 1}})
precompile(Tuple{typeof(StaticLint.resolve_getfield), CSTParser.EXPR, SymbolServer.FunctionStore, StaticLint.Toplevel{LanguageServer.Document}})
precompile(Tuple{Type{LanguageServer.Range}, LanguageServer.Document, Base.UnitRange{Int64}})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.CompletionItem, NTuple{5, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.TextEdit})
precompile(Tuple{Type{LanguageServer.DidSaveTextDocumentParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.DidSaveTextDocumentParams}, LanguageServer.TextDocumentIdentifier, String})
precompile(Tuple{LanguageServer.var"#116#117"{typeof(LanguageServer.textDocument_didSave_notification), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.DidSaveTextDocumentParams})
precompile(Tuple{typeof(LanguageServer.get_hover), Nothing, String, LanguageServer.LanguageServerInstance, Nothing, StaticLint.ExternalEnv})
precompile(Tuple{typeof(LanguageServer.get_closer_hover), Nothing, String})
precompile(Tuple{typeof(LanguageServer.get_fcall_position), Nothing, String})
precompile(Tuple{Type{LanguageServer.DocumentFormattingParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.FormattingOptions}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.FormattingOptions}, Int64, Vararg{Bool, 4}})
precompile(Tuple{LanguageServer.var"#116#117"{typeof(LanguageServer.textDocument_formatting_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.DocumentFormattingParams})
precompile(Tuple{Base.var"##s128#279", Vararg{Any, 5}})
precompile(Tuple{Base.var"##s128#278", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{29, Symbol}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:indent, :annotate_untyped_fields_with_any, :join_lines_based_on_source, :trailing_comma, :margin, :always_for_in, :whitespace_in_kwargs), Tuple{Int64, Bool, Bool, Nothing, Int64, Nothing, Bool}}, typeof(JuliaFormatter.format_text), String})
precompile(Tuple{typeof(Base.convert), Type{Array{String, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(CSTParser.is_nothing), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.is_colon), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.is_comma), CSTParser.EXPR})
precompile(Tuple{typeof(Tokenize.Tokens.isoperator), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.is_pairarrow), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.is_exor), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.isnumber), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.is_in), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.is_elof), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.is_anon_func), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.ispunctuation), CSTParser.EXPR})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.push!), Array{CSTParser.EXPR, 1}, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.isidentifier), CSTParser.EXPR})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.count), String, String})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Array{LanguageServer.TextEdit, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Array{LanguageServer.TextEdit, 1}}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, JSON.Serializations.StandardSerialization, String, Array{LanguageServer.TextEdit, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stop_idx,), Tuple{Int64}}, typeof(JuliaFormatter.nest_if_over_margin!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stop_idx,), Tuple{Nothing}}, typeof(JuliaFormatter.nest_if_over_margin!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State, Int64})
precompile(Tuple{Type{LanguageServer.DidCloseTextDocumentParams}, Base.Dict{String, Any}})
precompile(Tuple{LanguageServer.var"#116#117"{typeof(LanguageServer.textDocument_didClose_notification), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.DidCloseTextDocumentParams})
precompile(Tuple{LanguageServer.var"#116#117"{typeof(LanguageServer.shutdown_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Nothing})
